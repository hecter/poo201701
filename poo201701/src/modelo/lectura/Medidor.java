package modelo.lectura;
// Generated May 12, 2017 7:15:35 PM by Hibernate Tools 4.3.1


import basededatos.BaseDatosOracle;
import static basededatos.Secuencia.nextVal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import modelo.atencion.Casa;

/**
 * Medidores generated by hbm2java
 */
public class Medidor {


     private long id;
     private Casa casas;
     private String serial;
     private double costo;

    public Medidor() {
    }
    
    public Medidor(long id) {
        this.id = id;
    }

	
    public Medidor(long id, Casa casas, String serial, double costo) {
        this.id = id;
        this.casas = casas;
        this.serial = serial;
        this.costo = costo;
    }
    
    public Medidor(long id, String serial, double costo) {
        this.id = id;
        this.serial = serial;
        this.costo = costo;
    }
    
    public Medidor(String serial, double costo) {
        this.serial = serial;
        this.costo = costo;
    }
   
    public long getId() {
        return this.id;
    }
    
    public void setId(long id) {
        this.id = id;
    }
    public Casa getCasas() {
        return this.casas;
    }
    
    public void setCasas(Casa casas) {
        this.casas = casas;
    }
    public String getSerial() {
        return this.serial;
    }
    
    public void setSerial(String serial) {
        this.serial = serial;
    }
    public double getCosto() {
        return this.costo;
    }
    
    public void setCosto(long costo) {
        this.costo = costo;
    }

    public int insertar() throws SQLException{
        long secuencia = nextVal("SECTORES_SEQ");
         BaseDatosOracle basededatos = BaseDatosOracle.getInstance();
        String sql = "INSERT INTO MEDIDORES (ID,SERIAL,COSTO) "
                + "VALUES(?,?,?)";
        int ejecucion;
        basededatos.conectar();
        basededatos.prepararSql(sql);
        basededatos.asignarParametro(1, secuencia);
        basededatos.asignarParametro(2, getSerial());
        basededatos.asignarParametro(3, getCosto());
        ejecucion = basededatos.ejecutar();
        basededatos.cerrarSentencia();
        return ejecucion;
    }
    
    public int actualizar() throws SQLException{
       BaseDatosOracle basededatos = BaseDatosOracle.getInstance();
        String sql;
        int ejecucion;
        sql = "UPDATE MEDIDORES SET SERIAL = ?,COSTO = ? WHERE ID = ?";
        basededatos.conectar();
        basededatos.prepararSql(sql);
        basededatos.asignarParametro(1, getSerial());
        basededatos.asignarParametro(2, getCosto());
        basededatos.asignarParametro(3, getId());
        ejecucion = basededatos.ejecutar();
        basededatos.cerrarSentencia();
        return ejecucion;
    }
    
    public int actualizarCosto() throws SQLException{
       BaseDatosOracle basededatos = BaseDatosOracle.getInstance();
        String sql;
        int ejecucion;
        sql = "UPDATE MEDIDORES SET COSTO = ? WHERE ID = ?";
        basededatos.conectar();
        basededatos.prepararSql(sql);
        basededatos.asignarParametro(1, getCosto());
        basededatos.asignarParametro(2, getId());
        ejecucion = basededatos.ejecutar();
        basededatos.cerrarSentencia();
        return ejecucion;
    }
    
    public int eliminar() throws SQLException{
        BaseDatosOracle basededatos;
        basededatos = BaseDatosOracle.getInstance();
        String sql;
        int ejecucion;
        sql = "DELETE MEDIDORES SECTORES WHERE ID = ?";
        basededatos.conectar();
        basededatos.prepararSql(sql);
        basededatos.asignarParametro(1, getId());
        ejecucion = basededatos.ejecutar();
        basededatos.cerrarSentencia();
        return ejecucion;
    }
    
    public ArrayList<Medidor> listar() throws SQLException {
        ArrayList<Medidor> datos = new ArrayList<>();
        BaseDatosOracle bd = BaseDatosOracle.getInstance();
        String sql = "SELECT ID, SERIAL, COSTO FROM MEDIDORES";
        bd.conectar();
        bd.prepararSql(sql);
        ResultSet cursor = bd.ejecutarQuery();
        datos.clear();
        while (cursor.next()) {
            datos.add(
                    new Medidor(
                            cursor.getLong("ID"), 
                            cursor.getString("SERIAL"),
                            cursor.getDouble("COSTO")
                    )
            );
        }
        return datos;
    }
    
    public static boolean existe(String serial) throws SQLException {
        ArrayList<Sector> datos = new ArrayList<>();
        BaseDatosOracle bd = BaseDatosOracle.getInstance();
        bd.conectar();
        bd.prepararSql("SELECT MEDIDORES.ID FROM MEDIDORES WHERE SERIAL= ?");
        bd.asignarParametro(1, serial);
        ResultSet reg = bd.ejecutarQuery();
        datos.clear();
        return reg.next();
    }
    
    /*public static ArrayList<Medidor> listarMedidoreInstalados() throws SQLException {
        ArrayList<Medidor> datos = new ArrayList<>();
        BaseDatosOracle db  = BaseDatosOracle.getInstance();
        String sql = "SELECT MEDIDORES.ID,CASAS.SECTOR_ID FROM CASAS LEFT JOIN MEDIDORES ON CASAS.ID = MEDIDORES.CASA_ID";
        db.conectar();
        db.prepararSql(sql);
        ResultSet reg = db.ejecutarQuery();
        datos.clear();
        while (reg.next()) {
            datos.add(new Medidor(reg.getLong("ID")));
        }
        return datos;
    }*/
    
    public static ArrayList<String> listarMedidoreInstalados() throws SQLException {
        ArrayList<String> datos = new ArrayList<>();
        BaseDatosOracle db  = BaseDatosOracle.getInstance();
        String sql = "SELECT MEDIDORES.ID,CASAS.SECTOR_ID FROM CASAS LEFT JOIN MEDIDORES ON CASAS.ID = MEDIDORES.CASA_ID";
        db.conectar();
        db.prepararSql(sql);
        ResultSet reg = db.ejecutarQuery();
        datos.clear();
        while (reg.next()) {
            datos.add(reg.getString("ID")+";"+reg.getString("SECTOR_ID"));
        }
        return datos;
    }
}

